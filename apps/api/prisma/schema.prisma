generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  profile   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?  @unique
  hash      String?
  status    String?

  podcasts PodcastAuthor[]
  posts    Post[]

  @@map("Users")
}

model Podcast {
  id          Int             @id @default(autoincrement())
  title       String
  showNote    String?         @db.Text
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authors     PodcastAuthor[]
  tags        PodcastTag[]
  published   Boolean         @default(false)
  publishedAt DateTime?

  @@map("Podcasts")
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content     String?   @db.Text
  tags        PostTag[]
  published   Boolean   @default(false)
  publishedAt DateTime?

  @@map("Posts")
}

enum PodcastIdentity {
  Host
  Guest
}

model PodcastAuthor {
  podcastId Int
  podcast   Podcast         @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  identity  PodcastIdentity
  adjective String?

  @@id([podcastId, authorId])
  @@map("PodcastAuthors")
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  podcasts  PodcastTag[]
  posts     PostTag[]

  @@map("Tags")
}

model PodcastTag {
  podcastId Int
  podcast   Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assigndAt DateTime @default(now())

  @@id([podcastId, tagId])
  @@map("PodcastTags")
}

model PostTag {
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, tagId])
  @@map("PostTags")
}
